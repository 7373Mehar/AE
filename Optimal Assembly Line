#O(n * log(m)) time | O(1) space - where n is the length of stepDurations and m is the sum of all values in stepDurations
def optimalAssemblyLine(stepDurations, numStations):
    left, right = max(stepDurations), sum(stepDurations)
    maxStationDuration = float("inf")

    while left <= right:
        potentialMaxStationDuration = (left + right) // 2

        if isPotentialSolution(stepDurations, numStations, potentialMaxStationDuration):
            maxStationDuration = potentialMaxStationDuration

            right = potentialMaxStationDuration - 1

        else:
            left = potentialMaxStationDuration + 1

    return maxStationDuration

def isPotentialSolution(stepDurations, numStations, potentialMaxStationDuration):
    stationsRequired = 1
    currentDuration = 0

    for stepDuration in stepDurations:
        if currentDuration + stepDuration > potentialMaxStationDuration:
            stationsRequired += 1
            currentDuration = stepDuration

        else:
            currentDuration += stepDuration

    return stationsRequired <= numStations
