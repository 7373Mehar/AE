# Recursive Solution
# Time: O(N) | Space: O(D) where D is the Depth of the tree O(logn)

def invertBinaryTree(tree):
    if tree is None:
        return 
    else: 
        invertBinaryTree(tree.left)
        invertBinaryTree(tree.right)
        tree.left, tree.right = tree.right, tree.left
        
# This is the class of the input binary tree.
class BinaryTree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

##################################

#Iterative Solution
# Time: O(N) | Space: O(N)

def invertBinaryTree(tree):
    queue = [tree]
    while len(queue):
        current = queue.pop(0)
        if current is None:
            continue
        swapLeftAndRight(current)
        queue.append(current.left)
        queue.append(current.right)

def swapLeftAndRight(tree):
    tree.left, tree.right = tree.right, tree.left

# This is the class of the input binary tree.
class BinaryTree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
