#O(v + e) time | O(v) space - where v is the number of vertices and e is the number of edges in the graph
def twoColorable(edges):
    colors = [None for _ in edges]
    colors[0] = True
    stack = [0]

    while len(stack) > 0:
        node = stack.pop()
        for connection in edges[node]:
            if colors[connection] is None:
                colors[connection] = not colors[node]
                stack.append(connection)
            elif colors[connection] == colors[node]:
                return False
    return True

###############################

# O(NlogN) time and O(N) space
def taskAssignment(k, tasks):
    # Write your code here.
	pairedTasks = []
	taskIndices = getTaskIndices(tasks)
	tasks.sort()
	for index in range(k):
		task1 = tasks[index]
		task1Indices = taskIndices[task1]
		task1Index = task1Indices.pop()
		
		task2 = tasks[len(tasks) - 1 - index]
		task2Indices = taskIndices[task2]
		task2Index = task2Indices.pop()
		
		pairedTasks.append([task1Index, task2Index])
		
	return pairedTasks

def getTaskIndices(tasks):
	taskIndices = {}
	
	for index, task in enumerate(tasks):
		if task in taskIndices:
			taskIndices[task].append(index)
		else:
			taskIndices[task] = [index]
		
	return taskIndices

