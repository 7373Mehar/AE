#O(n^2) time| O(n) space

def arrayOfProducts(array):
    products = [1 for _ in range(len(array))]

    for i in range(len(array)):
        runningProduct = 1
        for j in range(len(array)):
            if i != j:
                runningProduct *= array[j]
        products[i] = runningProduct
    return products

#O(n) time| O(n) space

def arrayOfProducts(array):
    products = [1 for _ in range(len(array))]
    leftProducts = [1 for _ in range(len(array))]
    rightProducts = [1 for _ in range(len(array))]

    leftRunningProducts = 1
    for i in range(len(array)):
        leftProducts[i] = leftRunningProducts
        leftRunningProducts *= array[i]

    rightRunningProducts = 1
    for i in reversed(range(len(array))):
        rightProducts[i] = rightRunningProducts
        rightRunningProducts *= array[i]

    for i in range(len(array)):
        products[i] = leftProducts[i] * rightProducts[i]

    return products

#O(n) time | O(n) space

def arrayOfProducts(array):
    products = [1 for _ in range(len(array))]

    leftRunningProducts = 1
    for i in range(len(array)):
        products[i] = leftRunningProducts
        leftRunningProducts *= array[i]

    rightRunningProducts = 1
    for i in reversed(range(len(array))):
        products[i] *= rightRunningProducts
        rightRunningProducts *= array[i]

    return products
