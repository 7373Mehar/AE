#O(WNM8^S) time and O(W + S) space
def boggleBoard(board, words):
    # Write your code here.
    wordsFound = []
	for word in words:
		isWordPresent = False
		for i in range(len(board)):
			if isWordPresent:
				break
			for j in range(len(board[0])):
				if board[i][j] == word[0]:
					isWordPresent = findWord(board, word, i, j, 0)
					if isWordPresent:
						wordsFound.append(word)
						break
	return wordsFound

def findWord(board, word, i, j, index):
	if index >= len(word):
		return True
	
	if i not in range(len(board)) or j not in range(len(board[0])) or board[i][j] is None:
		return False
	
	if board[i][j] != word[index]:
		return False
	
	characterAtPosition = board[i][j]
	board[i][j] = None
	isWordFound = findWord(board, word, i+1, j, index+1) or findWord(board, word, i-1, j, index+1) or findWord(board, word, i, j+1, index+1) or findWord(board, word, i, j-1, index+1) or findWord(board, word, i+1, j+1, index+1) or findWord(board, word, i+1, j-1, index+1) or findWord(board, word, i-1, j+1, index+1) or findWord(board, word, i-1, j-1, index+1)
	board[i][j] = characterAtPosition
	return isWordFound
