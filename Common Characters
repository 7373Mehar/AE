#O(n * m) time | O(c) space - where n is the number of strings, m is the length of the string and c is the number of unique characters accross all strings

def commonCharacters(strings):
    characterCounts = {}
    #Mark it as 0 or increase character count
    for string in strings:
        uniqueStringCharacters = set(string)
        for character in uniqueStringCharacters:
            if character not in characterCounts:
                characterCounts[character] = 0
            characterCounts[character] += 1

    finalCharacters = []
    for character, count in characterCounts.items():
        if count == len(strings):
            finalCharacters.append(character)
    return finalCharacters
#############################################

#O(n * m) time | O(m) space - where n is the number of strings, m is the length of the string and c is the number of unique characters accross all strings


def commonCharacters(strings):
    smallestString = getSmallestString(strings)
    potentialCommonCharacters = set(smallestString)

    for string in strings:
        removeNonexistentCharacters(string, potentialCommonCharacters)
    return list(potentialCommonCharacters)

def getSmallestString(strings):
    smallestString = strings[0]
    for string in strings:
        if len(string) < len(smallestString):
            smallestString = string
    return smallestString

def removeNonexistentCharacters(string, potentialCommonCharacters):
    uniqueStringCharacters = set(string)

    for character in list(potentialCommonCharacters):
        if character not in uniqueStringCharacters:
            potentialCommonCharacters.remove(character)
            
